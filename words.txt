cd 'F:\git files\learngit'     改变当前路径语法
mkdir 。。。  在当前路径下创建文件。。。
pwd 用于显示当前目录
git init    把目录改成git可以管理的仓库
git add readme.txt    把该文件添加到仓库
git commit -m“。。。。”  把文件提交到仓库
注：git add是把修改放到到暂存区，git commit是将暂存区的修改提交
git status   查看仓库的当前的状态
git diff     查看文件修改的内容
git log      显示从最近到最远的提交日志（如果嫌输出太多可以搭配参数git log --pretty==oneline,前面显示的是版本号）  
git log状态下按q键退出
git reset --HEAD^  回退到上一个版本（HEAD^^是回退到上两个版本，HEAD^^^是回退到上三个版本）
cat readme.txt     查看文本的内容
git reset --hard ...  (...处填的需要回到的版本号)
git reflog         记录每一次的命令，查看命令历史
git restore readme.txt    可以丢弃工作区的修改（工作区就是自己创建的文件）一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
rm readme.txt     删除文件（仅仅删除工作区中的文件，提交到版本库里面的还存在）
git checkout -- readme.txt   用来恢复工作区误删，但版本库中还存在的文件
git rm readme.txt      
git commit -m"remove readme.txt"      这两条语句用来删除版本库中的文件
#####
git remote add origin git@github.com:jiejienidenuonuomi/nuonuomi.git    本地关联git网站上的远程库（这里用的是ssh协议）
如果像这样输入代码，在windows7和10等会出现问题，需要找到版本库里.git文件里面的config，将config文件里面url=后面加https://(即地址改成https类型) 
或者直接输入代码git remote add origin https://github.com/jiejienidenuonuomi/nuonuomi.git
注jiejienidenuonuomi是远程库的用户名而不是登录名，nuonuomi是远程库名字
git push -u origin master   把本地库里所有内容推送到远程库里（远程库空时，第一次使用时用这个命令）
git push origin master   推送一次过后，以后本地提交后，就可以用这语句推送至远程库
注：origin是git远程库的默认名，master是分支
git clone https://github.com/duanchang-cyber/nuomi   克隆一个本地库（把远程库nuomi克隆到本地，本地取决于运行程序的地址）
注：程序中nuomi是远程库名字，duanchang-cyber是远程库的用户名而不是登录名
#####
git checkout -b dev     创建并切换到分支dev
上面一条语句相当于 git branch dev    git checkout dev两条语句
git branch     查看当前分支（会列出所有分支，在当前分支前面有*号）
git checkout master    切换至master分支
git merge dev     把dev分支的内容合并到master分支上(用于合并指定分支到当前分支)
git branch -d dev   删除dev分支
git switch -c dev   切换到新的dev分支
git switch master   切换到已有的master分支
注：切换到其他分支dev，并在dev中工作，干完了应该提交上去，但是此时是在dev分支上提交的，master分支提交点还没有变，因此需要把dev分支上的内容合并到master分支上，
合并完成后要记得删除分支或把指针指向master主分支，另外向远程库提交一定在主分支上（文件夹显示的是当前分支的内容）。一定要记得删除不必要的分支，因为关掉界面分支还会存在。
#####
当两个分支都被修改，合并分支时会出现conflict问题，这时要打开文本手动直接修改内容，然后提交，再将多余的分支删除
#####
git merge --no-ff -m "merge with no-ff" dev    禁用fast forward并合并分支
注：合并分支git会默认用fast forword模式，在此模式下删除分支后会丢掉分支信息，这里--no-ff参数表示禁用fast forward，--m "..."表示要创建个新的提交
git log --graph --pretty=oneline --abbrev-commit  用这些参数能隐藏部分输出，并能看到分支提交图
#####
git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作（这里不用提交内容）
注:工作区改变的内容只有在一分支中提交后并没合并，在其他分支就看不见。也就是说在你提交后再次开始修改的东西，在没提交前看见的是仅仅你电脑上的，而不是分支里内容。
git stash list      查看没有提交但是储藏下来的工作现场
git stash apply     恢复stash中的内容，但是并不会把stash中的内容删除
git stash drop      删除stash中的内容
git stash pop       恢复并删除stash中的内容
git stash apply stash@{0}    恢复指定的stash
git cherry-pick 4c805e2      复制一个特定的提交到当前分支(提交的版本号可以查git log)
git branch -D dev         对于没有还合并的分支（不需要该分支的内容时）用这来删除
#####





